apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    timestamp: {{ now | quote }}
  name: "{{ .Values.images.app.name }}-{{ .Values.appEnvironment }}"
  labels:
    app: "{{ .Values.images.app.name }}-{{ .Values.appEnvironment }}"
    version: {{ .Values.appVersion }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: "{{ .Values.images.app.name }}-{{ .Values.appEnvironment }}"
  template:
    metadata:
      annotations:
        timestamp: {{ now | quote }}
      labels:
        app: "{{ .Values.images.app.name }}-{{ .Values.appEnvironment }}"
        version: {{ .Values.appVersion }}
    spec:
      imagePullSecrets:
        - name: quant-cloud
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: authorized-keys
          configMap:
            name: authorized-keys-{{ .Values.appEnvironment }}
            defaultMode: 384
        - name: drupal-data
          persistentVolumeClaim:
            claimName: "{{ .Values.images.drupal.name }}-pvc-{{ .Values.appEnvironment }}"
        {{- if and (eq .Values.productionBranch .Values.appEnvironment) (.Values.images.redis.enabled)  }}
        - name: redis-data
          persistentVolumeClaim:
            claimName: "redis-pvc-{{ .Values.appEnvironment }}"
        {{- end }}
      containers:
        ### BEGIN DRUPAL CONTAINER
        - name: "{{ .Values.images.drupal.name }}-{{ .Values.appEnvironment }}"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.images.drupal.repository }}:{{ .Values.appEnvironment }}"
          imagePullPolicy: Always
          ports:
            - name: {{ .Values.images.drupal.name }}
              containerPort: {{ .Values.images.drupal.port }}
              protocol: TCP
            - name: {{ .Values.images.drupal.sshname }}
              containerPort: {{ .Values.images.drupal.sshport }}
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.images.drupal.port }}
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.images.drupal.port }}
            timeoutSeconds: 1
          envFrom:
            - configMapRef:
                name: "drupal-config-{{ .Values.appEnvironment }}"
          env:
            - name: APACHE_RUN_USER
              value: "nobody"
            - name: QUANT_PRODUCTION_ENVIRONMENT
              value: "{{ .Values.productionBranch }}"
            - name: QUANT_ENVIRONMENT_BRANCH
              value: "{{ .Values.appEnvironment }}"
            - name: QUANT_ENVIRONMENT_TYPE
              value: "{{ include "quant.environmentType" . }}"
          volumeMounts:
            - name: authorized-keys
              mountPath: /root/.ssh/authorized_keys
              subPath: authorized_keys
            - name: drupal-data
              mountPath: /opt/drupal/web/sites/default/files
          resources:
            {{- if eq .Values.productionBranch .Values.appEnvironment }}
            {{- toYaml .Values.images.drupal.resources | nindent 12 }}
            {{- else }}
            {{- toYaml .Values.images.drupal.devresources | nindent 12 }}
            {{- end }}
        ### END DRUPAL CONTAINER
        ### BEGIN REDIS CONTAINER
        {{- if .Values.images.redis.enabled }}
        - name: {{ .Values.images.redis.name }}-{{ .Values.appEnvironment }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.images.redis.repository }}:{{ .Values.images.redis.tag }}"
          command:
            - redis-server
            - --save 60 1
            - --loglevel warning
            - --maxmemory-policy {{ .Values.images.redis.cachePolicy | default "volatile-lru" }}
            - --maxmemory {{ .Values.images.redis.mamxmemory | default "419430400" }}
          imagePullPolicy: {{ .Values.images.redis.pullPolicy | default .Values.images.pullPolicy }}
          ports:
            - name: {{ .Values.images.redis.name }}-{{ .Values.appEnvironment }}
              containerPort: {{ .Values.images.redis.port }}
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.images.redis.port }}
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.images.redis.port }}
          envFrom:
            - configMapRef:
                name: "drupal-config-{{ .Values.appEnvironment }}"
          {{- if eq .Values.productionBranch .Values.appEnvironment }}
          volumeMounts:
            - name: redis-data
              mountPath: /data
          {{- end }}
          resources:
            {{- if eq .Values.productionBranch .Values.appEnvironment }}
            {{- toYaml .Values.images.redis.resources | nindent 12 }}
            {{- else }}
            {{- toYaml .Values.images.redis.devresources | nindent 12 }}
            {{- end }}
        {{- end }}
        ### END REDIS CONTIANER
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
